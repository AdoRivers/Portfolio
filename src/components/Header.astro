---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "#experiencia",
    icon: "work"
  },
  {
    title: "Proyectos",
    label: "proyectos", 
    url: "#proyectos",
    icon: "projects"
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "#sobre-mi",
    icon: "person"
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "mailto:juarezriveraadolfo@gmail.com",
    icon: "contact",
    external: true
  },
]
---

<header class="fixed top-0 z-50 flex items-center justify-center w-full mx-auto mt-4 px-4">
  <nav class="nav-container flex items-center justify-center px-1 py-1 text-sm font-medium rounded-2xl backdrop-blur-md border border-white/10 shadow-lg">

    <div class="flex items-center relative">

      <div class="nav-indicator absolute top-1 left-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl transition-all duration-300 ease-out opacity-0"></div>
      
      {navItems.map((link) => (
        <a
          class={`nav-link relative flex items-center justify-center gap-1 sm:gap-2 px-2 sm:px-4 py-2.5 mx-0.5 sm:mx-1 rounded-xl transition-all duration-200 text-gray-600 dark:text-gray-300 hover:text-white hover:bg-white/10 dark:hover:bg-white/10 z-10 min-w-[44px] sm:min-w-auto ${link.external ? 'external-link' : ''}`}
          aria-label={link.label}
          href={link.url}
          data-section={link.label}
        >

          <span class="nav-icon opacity-70 group-hover:opacity-100 transition-opacity flex-shrink-0">
            {link.icon === 'work' && (
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 002 2M8 6v2a2 2 0 002 2h4a2 2 0 002-2V6m0 0V4a2 2 0 00-2-2H10a2 2 0 00-2 2v2"/>
              </svg>
            )}
            {link.icon === 'projects' && (
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
              </svg>
            )}
            {link.icon === 'person' && (
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
              </svg>
            )}
            {link.icon === 'contact' && (
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            )}
          </span>
          
          <span class="nav-text hidden xs:inline-block text-xs sm:text-sm whitespace-nowrap">
            {link.title}
          </span>
          
          {link.external && (
            <svg class="w-3 h-3 opacity-50 hidden sm:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
            </svg>
          )}
        </a>
      ))}
    </div>

    <div class="ml-1 sm:ml-2 pl-1 sm:pl-2 border-l border-white/10">
      <ThemeToggle />
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section[id]")
    const navLinks = document.querySelectorAll(".nav-link:not(.external-link)")
    const indicator = document.querySelector(".nav-indicator") as HTMLElement

    // Smooth scroll behavior
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault()
        const targetId = link.getAttribute('href')?.substring(1)
        const targetSection = document.getElementById(targetId!)
        
        if (targetSection) {
          const headerOffset = 80
          const elementPosition = targetSection.getBoundingClientRect().top
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          })
        }
      })
    })

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => {
            link.classList.remove("active", "text-white")
            link.classList.add("text-gray-600", "dark:text-gray-300")
          })

          const activeLink = document.querySelector(`[data-section="${entry.target.id}"]`) as HTMLElement
          if (activeLink && !activeLink.classList.contains('external-link')) {
            activeLink.classList.add("active", "text-white")
            activeLink.classList.remove("text-gray-600", "dark:text-gray-300")
            
            moveIndicator(activeLink)
          }
        }
      })
    }

    const moveIndicator = (activeLink: HTMLElement) => {
      if (indicator && activeLink) {
        const rect = activeLink.getBoundingClientRect()
        const containerRect = activeLink.parentElement!.getBoundingClientRect()
        
        indicator.style.opacity = '1'
        indicator.style.width = `${rect.width - 8}px`
        indicator.style.height = `${rect.height - 8}px`
        indicator.style.transform = `translateX(${rect.left - containerRect.left + 4}px)`
      }
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "-20% 0px -80% 0px",
      threshold: 0.1,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    const currentHash = window.location.hash.substring(1)
    if (currentHash) {
      const activeLink = document.querySelector(`[data-section="${currentHash}"]`) as HTMLElement
      if (activeLink) {
        moveIndicator(activeLink)
      }
    }

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  .nav-container {
    background: rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    animation: nav-entrance 0.6s ease-out;
  }

  :global(.dark) .nav-container {
    background: rgba(17, 24, 39, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.05);
  }

  .nav-link {
    position: relative;
    z-index: 2;
  }

  .nav-link.active {
    color: white !important;
  }

  .nav-link:hover .nav-icon,
  .nav-link.active .nav-icon {
    opacity: 1;
    transform: scale(1.1);
  }

  .nav-indicator {
    position: absolute;
    z-index: 1;
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border-radius: 0.75rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.3);
  }

  @media (min-width: 480px) {
    .xs\:inline-block {
      display: inline-block;
    }
  }


  @media (max-width: 640px) {
    .nav-container {
      margin: 0 0.5rem;
      padding: 0.25rem;
    }
    
    .nav-link {
      padding: 0.625rem 0.5rem;
      min-width: 44px;
    }
  }

  @media (max-width: 480px) {
    .nav-container {
      margin: 0 0.25rem;
      padding: 0.125rem;
    }
    
    .nav-link {
      padding: 0.5rem 0.375rem;
      gap: 0;
    }
    

    .nav-container > div:first-child {
      display: none;
    }
    
    .nav-container > div:last-child {
      margin-left: 0.5rem;
      padding-left: 0.5rem;
    }
  }

  @media (max-width: 360px) {
    .nav-container {
      margin: 0;
      border-radius: 1rem;
    }
    
    .nav-link {
      padding: 0.5rem 0.25rem;
      margin: 0.125rem;
    }
  }

  @keyframes nav-entrance {
    0% {
      opacity: 0;
      transform: translateY(-20px) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .nav-container {
    animation: nav-scroll-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-scroll-shadow {
    0% {
      box-shadow: 
        0 8px 32px rgba(0, 0, 0, 0.1),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }
    100% {
      box-shadow: 
        0 12px 40px rgba(0, 0, 0, 0.15),
        0 4px 20px rgba(0, 0, 0, 0.1),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(16px);
      -webkit-backdrop-filter: blur(16px);
    }
  }
</style>